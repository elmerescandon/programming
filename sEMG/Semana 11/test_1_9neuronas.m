function [y1] = test_1_9neuronas(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2020 13:25:37.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 9xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [1.527221903734327757 1.5285516377431678237 1.5312505720817459753 1.5325055085661560828 1.5317315587967330615 1.5281577446953087396 1.5287734635218184209 1.5268207801285036407 1.5276900235991854871 1.5279311957790415732;1.4326034755969221379 1.4469260858585537566 1.4554992448545154282 1.4609976753989977194 1.4622457993941349041 1.4638788485707447951 1.4742679506097380315 1.4894788167318184779 1.4877433809938722664 1.4952183445401117101;1.3727758027424648013 1.3742633986628443044 1.3772994637582423039 1.3771080668374726663 1.3710350089263136919 1.3631765262084889478 1.3596620769715603849 1.3589725175760660747 1.3624091730735374828 1.3630864281043595376;1.4999168445641497538 1.4932438566867396457 1.4929994670484738606 1.4818767809363788679 1.4739142452228808366 1.4797977594833384707 1.4754799540331955399 1.4774867191770992836 1.4717654658352474772 1.4709036208433989845;1.4261018656062769416 1.3899935422948588304 1.3536457076428034529 1.2874063174837597767 1.2506998733627991971 1.2406915887523557451 1.2339685951252348239 1.2302495689717891647 1.2319884486341738938 1.2409055476551977826;1.252616628751950234 1.2341200356848329722 1.2262622492832739862 1.2278058993105727126 1.2333695108839388688 1.2328712501347094399 1.2307772081091366001 1.2272932800130813558 1.2294359857572003669 1.226533956834858996;1.4545241065307901174 1.44990675214372855 1.4446656538012860871 1.4378699821493354793 1.4358036519061423419 1.4366327657917847826 1.4368226276181592649 1.4338146620183656044 1.4271500290545144907 1.4224356022318471737;1.4421543585958236378 1.4297217776188204663 1.4242978639050296596 1.4162502029529473457 1.3920075010663692794 1.3795339892067328691 1.3769131442907074359 1.3669823906126570279 1.3638772038108524232 1.3633558826432461419;1.3106531177312850112 1.3152493875060224937 1.319277884032338477 1.3248246461486676839 1.3233360352909173674 1.3190881889477081845 1.320676615211535232 1.319416770116149662 1.3199098738912435902 1.3197558155510942246];

% ===== SIMULATION ========

% Input 1
% no processing

% Layer 1
z1 = negdist_apply(IW1_1,x1);
a1 = compet_apply(z1);

% Output 1
y1 = a1;
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
